using System.Runtime.CompilerServices;
using Unity.Entities;
using Unity.Jobs;

[CompilerGenerated]
public class JobEntity_WithMySharedComponentSystem : SystemBase
{
	private EntityQuery __query_0;

	private ComponentTypeHandle<Rotation> __Rotation_RW_ComponentTypeHandle;

	private ComponentTypeHandle<RotationSpeed_ForEach> __RotationSpeed_ForEach_RO_ComponentTypeHandle;

	protected override void OnUpdate()
	{
		JobEntity_WithMySharedComponent jobEntity_WithMySharedComponent = default(JobEntity_WithMySharedComponent);
		jobEntity_WithMySharedComponent.MyDeltaTime = base.Time.DeltaTime;
		JobEntity_WithMySharedComponent jobEntity_WithMySharedComponent2 = jobEntity_WithMySharedComponent;
		EntityQuery entityQuery = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[3]
			{
				typeof(Rotation),
				typeof(RotationSpeed_ForEach),
				typeof(MySharedComponent)
			},
			Options = EntityQueryOptions.IncludeDisabled
		});
		jobEntity_WithMySharedComponent2.Run(entityQuery);
	}

	[DOTSCompilerPatchedMethod("OnUpdate")]
	protected void __OnUpdate_48EF577D()
	{
		JobEntity_WithMySharedComponent jobEntity_WithMySharedComponent = default(JobEntity_WithMySharedComponent);
		jobEntity_WithMySharedComponent.MyDeltaTime = base.Time.DeltaTime;
		JobEntity_WithMySharedComponent job = jobEntity_WithMySharedComponent;
		EntityQuery entityQuery = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[3]
			{
				typeof(Rotation),
				typeof(RotationSpeed_ForEach),
				typeof(MySharedComponent)
			},
			Options = EntityQueryOptions.IncludeDisabled
		});
		__ScheduleViaJobEntityBatchExtension_0(job, entityQuery, base.Dependency);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private void __ScheduleViaJobEntityBatchExtension_0(JobEntity_WithMySharedComponent job, EntityQuery entityQuery, JobHandle dependency)
	{
		__Rotation_RW_ComponentTypeHandle.Update(this);
		__RotationSpeed_ForEach_RO_ComponentTypeHandle.Update(this);
		job.__EntityManager = base.EntityManager;
		job.__RotationTypeHandle = __Rotation_RW_ComponentTypeHandle;
		job.__RotationSpeed_ForEachTypeHandle = __RotationSpeed_ForEach_RO_ComponentTypeHandle;
		job.__MySharedComponentTypeHandle = GetSharedComponentTypeHandle<MySharedComponent>();
		JobEntityBatchExtensions.Run(job, entityQuery);
	}

	protected override void OnCreateForCompiler()
	{
		base.OnCreateForCompiler();
		__query_0 = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[3]
			{
				ComponentType.ReadOnly<RotationSpeed_ForEach>(),
				ComponentType.ReadOnly<MySharedComponent>(),
				ComponentType.ReadWrite<Rotation>()
			},
			Any = new ComponentType[0],
			None = new ComponentType[0],
			Options = EntityQueryOptions.Default
		});
		__Rotation_RW_ComponentTypeHandle = GetComponentTypeHandle<Rotation>();
		__RotationSpeed_ForEach_RO_ComponentTypeHandle = GetComponentTypeHandle<RotationSpeed_ForEach>(isReadOnly: true);
	}
}
