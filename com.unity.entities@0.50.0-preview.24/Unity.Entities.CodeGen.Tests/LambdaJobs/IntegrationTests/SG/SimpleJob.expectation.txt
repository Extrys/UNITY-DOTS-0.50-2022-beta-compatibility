using AOT;
using System;
using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;

[CompilerGenerated]
internal class SimpleJob : SystemBase
{
	[NoAlias]
	[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
	private struct AJobForRunning_Job : IJob
	{
		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldNoBurst;

		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldBurst;

		public NativeArray<float> myCapturedFloats;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void OriginalLambdaBody()
		{
			myCapturedFloats[0] += 1f;
		}

		public void Execute()
		{
			OriginalLambdaBody();
		}

		[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
		[MonoPInvokeCallback(typeof(InternalCompilerInterface.JobRunWithoutJobSystemDelegate))]
		public static void RunWithoutJobSystem(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobForRunning_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		}
	}

	[NoAlias]
	[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
	private struct AJobThatWrites_Job : IJob
	{
		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldNoBurst;

		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldBurst;

		public int myCapturedInt;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void OriginalLambdaBody()
		{
			myCapturedInt = 1;
		}

		public void Execute()
		{
			OriginalLambdaBody();
		}

		[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
		[MonoPInvokeCallback(typeof(InternalCompilerInterface.JobRunWithoutJobSystemDelegate))]
		public static void RunWithoutJobSystem(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobThatWrites_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		}
	}

	[NoAlias]
	[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
	private struct AJobThatReads_Job : IJob
	{
		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldNoBurst;

		internal static InternalCompilerInterface.JobRunWithoutJobSystemDelegate FunctionPtrFieldBurst;

		public int myCapturedInt;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void OriginalLambdaBody()
		{
			EnsureNotOptimizedAway(myCapturedInt);
		}

		public void Execute()
		{
			OriginalLambdaBody();
		}

		[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
		[MonoPInvokeCallback(typeof(InternalCompilerInterface.JobRunWithoutJobSystemDelegate))]
		public static void RunWithoutJobSystem(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobThatReads_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		}
	}

	[NoAlias]
	[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
	private struct AJobForScheduling_Job : IJob
	{
		public NativeArray<float> myCapturedFloats;

		public int myCapturedInt;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void OriginalLambdaBody()
		{
			for (int i = 0; i != myCapturedFloats.Length; i++)
			{
				myCapturedFloats[i] *= 2 + myCapturedInt;
			}
		}

		public void Execute()
		{
			OriginalLambdaBody();
		}
	}

	protected override void OnUpdate()
	{
		NativeArray<float> myCapturedFloats = default(NativeArray<float>);
		int myCapturedInt = 3;
		LambdaSingleJobDescriptionExecutionMethods.Run(base.Job.WithName("AJobForRunning").WithCode(delegate
		{
			myCapturedFloats[0] += 1f;
		}));
		LambdaSingleJobDescriptionExecutionMethods.Run(base.Job.WithName("AJobThatWrites").WithCode(delegate
		{
			myCapturedInt = 1;
		}));
		LambdaSingleJobDescriptionExecutionMethods.Run(base.Job.WithName("AJobThatReads").WithCode(delegate
		{
			EnsureNotOptimizedAway(myCapturedInt);
		}));
		LambdaSingleJobDescriptionExecutionMethods.Schedule(base.Job.WithName("AJobForScheduling").WithCode(delegate
		{
			for (int i = 0; i != myCapturedFloats.Length; i++)
			{
				myCapturedFloats[i] *= 2 + myCapturedInt;
			}
		}));
	}

	protected static T EnsureNotOptimizedAway<T>(T x)
	{
		return x;
	}

	[DOTSCompilerPatchedMethod("OnUpdate")]
	protected void __OnUpdate_5476834()
	{
		NativeArray<float> myCapturedFloats = default(NativeArray<float>);
		int myCapturedInt = 3;
		AJobForRunning_Execute(ref myCapturedFloats);
		AJobThatWrites_Execute(ref myCapturedInt);
		AJobThatReads_Execute(ref myCapturedInt);
		AJobForScheduling_Execute(myCapturedFloats, myCapturedInt);
	}

	private void AJobForRunning_Execute(ref NativeArray<float> myCapturedFloats)
	{
		AJobForRunning_Job aJobForRunning_Job = default(AJobForRunning_Job);
		aJobForRunning_Job.myCapturedFloats = myCapturedFloats;
		AJobForRunning_Job jobData = aJobForRunning_Job;
		CompleteDependency();
		InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer = JobsUtility.JobCompilerEnabled ? AJobForRunning_Job.FunctionPtrFieldBurst : AJobForRunning_Job.FunctionPtrFieldNoBurst;
		InternalCompilerInterface.UnsafeRunIJob(ref jobData, functionPointer);
		myCapturedFloats = jobData.myCapturedFloats;
	}

	private void AJobThatWrites_Execute(ref int myCapturedInt)
	{
		AJobThatWrites_Job aJobThatWrites_Job = default(AJobThatWrites_Job);
		aJobThatWrites_Job.myCapturedInt = myCapturedInt;
		AJobThatWrites_Job jobData = aJobThatWrites_Job;
		CompleteDependency();
		InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer = JobsUtility.JobCompilerEnabled ? AJobThatWrites_Job.FunctionPtrFieldBurst : AJobThatWrites_Job.FunctionPtrFieldNoBurst;
		InternalCompilerInterface.UnsafeRunIJob(ref jobData, functionPointer);
		myCapturedInt = jobData.myCapturedInt;
	}

	private void AJobThatReads_Execute(ref int myCapturedInt)
	{
		AJobThatReads_Job aJobThatReads_Job = default(AJobThatReads_Job);
		aJobThatReads_Job.myCapturedInt = myCapturedInt;
		AJobThatReads_Job jobData = aJobThatReads_Job;
		CompleteDependency();
		InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer = JobsUtility.JobCompilerEnabled ? AJobThatReads_Job.FunctionPtrFieldBurst : AJobThatReads_Job.FunctionPtrFieldNoBurst;
		InternalCompilerInterface.UnsafeRunIJob(ref jobData, functionPointer);
		myCapturedInt = jobData.myCapturedInt;
	}

	private void AJobForScheduling_Execute(NativeArray<float> myCapturedFloats, int myCapturedInt)
	{
		AJobForScheduling_Job aJobForScheduling_Job = default(AJobForScheduling_Job);
		aJobForScheduling_Job.myCapturedFloats = myCapturedFloats;
		aJobForScheduling_Job.myCapturedInt = myCapturedInt;
		AJobForScheduling_Job jobData = aJobForScheduling_Job;
		base.Dependency = IJobExtensions.Schedule(jobData, base.Dependency);
	}

	protected override void OnCreateForCompiler()
	{
		base.OnCreateForCompiler();
		AJobForRunning_Job.FunctionPtrFieldNoBurst = delegate(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobForRunning_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		};
		AJobForRunning_Job.FunctionPtrFieldBurst = InternalCompilerInterface.BurstCompile(AJobForRunning_Job.FunctionPtrFieldNoBurst);
		AJobThatWrites_Job.FunctionPtrFieldNoBurst = delegate(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobThatWrites_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		};
		AJobThatWrites_Job.FunctionPtrFieldBurst = InternalCompilerInterface.BurstCompile(AJobThatWrites_Job.FunctionPtrFieldNoBurst);
		AJobThatReads_Job.FunctionPtrFieldNoBurst = delegate(IntPtr jobPtr)
		{
			try
			{
				InternalCompilerInterface.UnsafeAsRef<AJobThatReads_Job>(jobPtr).OriginalLambdaBody();
			}
			finally
			{
			}
		};
		AJobThatReads_Job.FunctionPtrFieldBurst = InternalCompilerInterface.BurstCompile(AJobThatReads_Job.FunctionPtrFieldNoBurst);
	}
}
